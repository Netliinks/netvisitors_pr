//
//  AssistControl.ts
//
//  Generated by Poll Castillo on 15/03/2023.
//
import { Config } from "../../../Configs.js"
import { getEntityData, getFile, getFilterEntityData } from "../../../endpoints.js";
import { CloseDialog, drawTagsIntoTables, renderRightSidebar, filterDataByHeaderType, inputObserver, verifyUserType, pageNumbers, fillBtnPagination, calculateGestionMarcation } from "../../../tools.js";
import { InterfaceElement, InterfaceElementCollection } from "../../../types.js"
import { UIContentLayout } from "./Layout.js"
import { UITableSkeletonTemplate } from "./Template.js"
import { exportMarcationsCsv, exportMarcationsPdf, exportMarcationsXls } from "../../../exportFiles/marcations2.js"

// Local configs
const tableRows = Config.tableRows
let currentPage = Config.currentPage
const pageName = 'Gesti√≥n de asistencias'
const customerId = localStorage.getItem('customer_id');
let infoPage = {
    count: 0,
    offset: Config.offset,
    currentPage: currentPage,
    search: "",
    date: null
};
let dataPage: any
const GetAssistControl = async (): Promise<void> => {
    //const assistControlRaw = await getEntitiesData('Marcation')
    //const assistControl = assistControlRaw.filter((data: any) => `${data.customer?.id}` === `${customerId}`);
    let raw = JSON.stringify({
        "filter": {
            "conditions": [
              {
                "property": "customer.id",
                "operator": "=",
                "value": `${customerId}`
              },
              {
                  "property": "ingressDate",
                  "operator": "=",
                  "value": `${infoPage.date}`
              }
            ],
            
        }, 
        sort: "-createdDate",
        fetchPlan: 'full',
        
    })
    if (infoPage.search != "") {
        raw = JSON.stringify({
            "filter": {
                "conditions": [
                    {
                        "group": "OR",
                        "conditions": [
                            {
                                "property": "user.dni",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "user.firstName",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "user.secondLastName",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "marcationState.name",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            }
                        ]
                    },
                    {
                        "property": "customer.id",
                        "operator": "=",
                        "value": `${customerId}`
                    },
                    {
                        "property": "ingressDate",
                        "operator": "=",
                        "value": `${infoPage.date}`
                    }
                ]
            },
            sort: "-createdDate",
            //limit: Config.tableRows,
            //offset: infoPage.offset,
            fetchPlan: 'full',
        });
    }
    const assistControl: any = await getFilterEntityData("Marcation", raw)
    // @ts-ignore
    dataPage = await calculateGestionMarcation(assistControl);
    return dataPage;
}

export class AssistGestion {
    private dialogContainer: InterfaceElement = document.getElementById('app-dialogs')
    private siebarDialogContainer: InterfaceElement = document.getElementById('entity-editor-container')
    private appContainer: InterfaceElement = document.getElementById('datatable-container')

    public render = async (search: any, date: any): Promise<void> => {
        infoPage.search = search;
        infoPage.date = date
        this.appContainer.innerHTML = ''
        this.appContainer.innerHTML = UIContentLayout

        // Getting interface elements
        const viewTitle: InterfaceElement = document.getElementById('view-title')
        const tableBody: InterfaceElement = document.getElementById('datatable-body')
        const dateField: InterfaceElement = document.getElementById('dateField');
        dateField.value = date

        // Changing interface element content
        viewTitle.innerText = pageName
        tableBody.innerHTML = '.Cargando... Esto puede tomar un momento'
        
        let assistControlArray: any = await GetAssistControl()
        tableBody.innerHTML = UITableSkeletonTemplate.repeat(tableRows)

        // Exec functions
        this.load(tableBody, currentPage, assistControlArray)
        this.searchVisit(tableBody, assistControlArray, dateField)
        new filterDataByHeaderType().filter()
        this.pagination(assistControlArray, tableRows, currentPage)
        this.export()

        // Rendering icons
    }

    public load = (tableBody: InterfaceElement, currentPage: number, assistControl: any): void => {
        tableBody.innerHTML = '' // clean table

        // configuring max table row size
        currentPage--
        let start: number = tableRows * currentPage
        let end: number = start + tableRows
        let paginatedItems: any = assistControl.slice(start, end)

        // Show message if page is empty
        if (assistControl.length === 0) {
            let row: InterfaceElement = document.createElement('TR')
            row.innerHTML = `
            <td>No existen datos<td>
            <td></td>
            <td></td>
            `

            tableBody.appendChild(row)
        }
        else {
            for (let i = 0; i < paginatedItems.length; i++) {
                let assistControl = paginatedItems[i] // getting visit items
                let row: InterfaceElement = document.createElement('TR')
                row.innerHTML += `
                <td style="white-space: nowrap">${assistControl.firstName} ${assistControl.lastName}</td>
                <td>${assistControl.dni}</td>
                <td id="table-date">${assistControl.ingressDate}</td>
                <td id="table-date">${assistControl.ingressTime}</td>
                <td id="table-date">${assistControl.egressTime}</td>
                `
                tableBody.appendChild(row)
                drawTagsIntoTables()
            }
        }
    }

    private searchVisit = async (tableBody: InterfaceElement, visits: any, dateField: any) => {
        const search: InterfaceElement = document.getElementById('search')
        const btnSearch: InterfaceElement = document.getElementById('btnSearch');
        search.value = infoPage.search;
        await search.addEventListener('keyup', () => {
            const arrayVisits: any = visits.filter((visit: any) =>
            `${visit.dni}${visit.firstName}${visit.lastName}${visit.ingressDate}${visit.ingressTime}${visit.egressDate}${visit.egressTime}`
                    .toLowerCase()
                    .includes(search.value.toLowerCase())
            )

            let filteredVisit = arrayVisits.length
            let result = arrayVisits

            if (filteredVisit >= Config.tableRows) filteredVisit = Config.tableRows

            this.load(tableBody, currentPage, result)
        })
        btnSearch.addEventListener('click', async () => {
            new AssistGestion().render(search.value.toLowerCase(), dateField.value);
        });
    }

    private export = (): void => {
        const exportNotes: InterfaceElement = document.getElementById('export-entities');
        exportNotes.addEventListener('click', async() => {
            this.dialogContainer.style.display = 'block';
            this.dialogContainer.innerHTML = `
                <div class="dialog_content" id="dialog-content">
                    <div class="dialog">
                        <div class="dialog_container padding_8">
                            <div class="dialog_header">
                                <h2>Seleccionar la fecha</h2>
                            </div>

                            <div class="dialog_message padding_8">
                                <div class="form_group">
                                    <div class="form_input">
                                        <label class="form_label" for="start-date">Desde:</label>
                                        <input type="date" class="input_date input_date-start" id="start-date" name="start-date">
                                    </div>
                    
                                    <div class="form_input">
                                        <label class="form_label" for="end-date">Hasta:</label>
                                        <input type="date" class="input_date input_date-end" id="end-date" name="end-date">
                                    </div>

                                    <label for="exportCsv">
                                        <input type="radio" id="exportCsv" name="exportOption" value="csv" /> CSV
                                    </label>

                                    <label for="exportXls">
                                        <input type="radio" id="exportXls" name="exportOption" value="xls" checked /> XLS
                                    </label>

                                    <label for="exportPdf">
                                        <input type="radio" id="exportPdf" name="exportOption" value="pdf" /> PDF
                                    </label>
                                </div>
                            </div>

                            <div class="dialog_footer">
                                <button class="btn btn_primary" id="cancel">Cancelar</button>
                                <button class="btn btn_danger" id="export-data">Exportar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            let fecha = new Date(); //Fecha actual
            let mes: any = fecha.getMonth()+1; //obteniendo mes
            let dia: any = fecha.getDate(); //obteniendo dia
            let anio: any = fecha.getFullYear(); //obteniendo a√±o
            if(dia<10)
                dia='0'+dia; //agrega cero si el menor de 10
            if(mes<10)
                mes='0'+mes //agrega cero si el menor de 10

            // @ts-ignore
            document.getElementById("start-date").value = anio+"-"+mes+"-"+dia;
            // @ts-ignore
            document.getElementById("end-date").value = anio+"-"+mes+"-"+dia;
            inputObserver();
            const _closeButton: InterfaceElement = document.getElementById('cancel');
            const exportButton: InterfaceElement = document.getElementById('export-data');
            const _dialog: InterfaceElement = document.getElementById('dialog-content');
            exportButton.addEventListener('click', async() => {
                const _values: InterfaceElement = {
                    start: document.getElementById('start-date'),
                    end: document.getElementById('end-date'),
                    exportOption: document.getElementsByName('exportOption')
                }
                let rawExport = JSON.stringify({
                    "filter": {
                        "conditions": [
                            {
                                "property": "customer.id",
                                "operator": "=",
                                "value": `${customerId}`
                            },
                            {
                                "property": "ingressDate",
                                "operator": ">=",
                                "value": `${_values.start.value}`
                            },
                            {
                                "property": "ingressDate",
                                "operator": "<=",
                                "value": `${_values.end.value}`
                            }
                        ],
                    },
                    sort: "-createdDate",
                    fetchPlan: 'full',
                });
                const dataRaw = await getFilterEntityData("Marcation", rawExport); //await GetAssistControl();
                const marcations = await calculateGestionMarcation(dataRaw);
                
                for (let i = 0; i < _values.exportOption.length; i++) {
                    let ele: any = _values.exportOption[i]
                    if (ele.type = "radio") {
    
                        if (ele.checked){
                            if(ele.value == "xls"){
                                // @ts-ignore
                               exportMarcationsXls(marcations, _values.start.value, _values.end.value)
                            }else if(ele.value == "csv"){
                                // @ts-ignore
                                exportMarcationsCsv(marcations, _values.start.value, _values.end.value)
                            }else if(ele.value == "pdf"){
                                // @ts-ignore
                                exportMarcationsPdf(marcations, _values.start.value, _values.end.value)
                            }
                        }
                    }
                }
                
                
            });
            _closeButton.onclick = () => {
                new CloseDialog().x(_dialog);
            };
        });
    };

    private pagination(items: [], limitRows: number, currentPage: number) {
        const tableBody: InterfaceElement = document.getElementById('datatable-body')
        const paginationWrapper: InterfaceElement = document.getElementById('pagination-container')
        paginationWrapper.innerHTML = ''

        let pageCount: number
        pageCount = Math.ceil(items.length / limitRows)

        let button: InterfaceElement

        if(pageCount <= Config.maxLimitPage){
            for (let i = 1; i < pageCount + 1; i++) {
                button = setupButtons(
                    i, items, currentPage, tableBody, limitRows
                )

                paginationWrapper.appendChild(button)
            }
            fillBtnPagination(currentPage, Config.colorPagination)
        }else{
            pagesOptions(items, currentPage)  
        }

        function setupButtons(page: any, items: any, currentPage: number, tableBody: InterfaceElement, limitRows: number) {
            const button: InterfaceElement = document.createElement('button')
            button.classList.add('pagination_button')
            button.setAttribute("name", "pagination-button")
            button.setAttribute("id", "btnPag"+page)
            button.innerText = page

            button.addEventListener('click', (): void => {
                const buttons = document.getElementsByName("pagination-button");
                buttons.forEach(button => {
                    button.style.background = "#ffffff"; 
                })
                currentPage = page
                fillBtnPagination(page, Config.colorPagination)
                new AssistGestion().load(tableBody, page, items)
            })

            return button
        }

        function setupButtons2(page: any) {
            const button: InterfaceElement = document.createElement('button')
            button.classList.add('pagination_button')
            button.setAttribute("id", "btnPag"+page)
            button.innerText = page
            button.addEventListener('click', (): void => {
                currentPage = page
                pagesOptions(items, currentPage)
                new AssistGestion().load(tableBody, page, items)
            })
            return button
        }

        function pagesOptions(items: any, currentPage: any) {
            paginationWrapper.innerHTML = ''
            let pages = pageNumbers(pageCount, Config.maxLimitPage, currentPage)
            
            const prevButton: InterfaceElement = document.createElement('button')
            prevButton.classList.add('pagination_button')
            prevButton.innerText = "<<"     
            paginationWrapper.appendChild(prevButton)

            const nextButton: InterfaceElement = document.createElement('button')
            nextButton.classList.add('pagination_button')
            nextButton.innerText = ">>"
    
            for (let i = 0; i < pages.length; i++) {
                if(pages[i] > 0 && pages[i] <= pageCount){
                    button = setupButtons2(
                        pages[i]
                    )
                    paginationWrapper.appendChild(button)
                }
            }
            paginationWrapper.appendChild(nextButton)
            fillBtnPagination(currentPage, Config.colorPagination)
            setupButtonsEvents(prevButton, nextButton)
        }

        function setupButtonsEvents(prevButton: InterfaceElement, nextButton: InterfaceElement) {
            prevButton.addEventListener('click', (): void => {
                pagesOptions(items, 1)
                new AssistGestion().load(tableBody, 1, items)
            })

            nextButton.addEventListener('click', (): void => {
                pagesOptions(items, pageCount)
                new AssistGestion().load(tableBody, pageCount, items)
            })
        }
    }

}